# MCP Profile for Thane's 3D Action Game (Godot 4.4+)


- **Debugging**: Help identify specific problems and provide targeted fixes

## Current Project Architecture

### Core Systems (Component-Based)
```gdscript
# Main player uses component pattern
Player (CharacterBody3D)
‚îú‚îÄ‚îÄ MovementComponent (PlayerMovement.gd)
‚îú‚îÄ‚îÄ CombatComponent (PlayerCombat.gd)
‚îî‚îÄ‚îÄ Visual components (hands, feet, body via CharacterAppearanceManager)
```

### Autoload Singletons
- `WeaponManager` - Handles weapon equipping/stats
- `LootManager` - Handles all loot dropping with physics
- `WeaponPool` - Random weapon generation by rarity
- `DashEffectsManager` - Visual effects for dashing
- `WeaponAnimationManager` - Weapon attack animations
- `DamageNumbers` - Floating damage text system

### Key Technical Patterns

#### Signal-Heavy Communication
```gdscript
# Preferred pattern for component communication
signal health_changed(current: int, max: int)
signal weapon_equipped(weapon: WeaponResource)
# Always connect signals in _ready() with proper cleanup
```

#### Resource-Based Data
```gdscript
# WeaponResource extends Resource for weapon data
# Enum-based weapon types (SWORD, BOW, STAFF)
# Export groups for inspector organization
```

#### Physics-Based Loot System
```gdscript
# Loot starts as RigidBody3D for physics
# Converts to Area3D for pickup after settling
# Pickup delay system to prevent instant collection
```

#### Procedural Room Generation
```gdscript
# Protected boundary system prevents wall deletion
# Room shapes: SQUARE, L_SHAPE, T_SHAPE, etc.
# Wave-based progression creates new rooms
```

## Coding Preferences

### Godot 4 Modern Syntax
- Use `@export` groups for organization
- Use `@onready` for node references
- Use `CharacterBody3D.move_and_slide()` (not the old version)
- Prefer `get_tree().get_first_node_in_group()` over singletons when possible

### Code Organization
```gdscript
# Preferred script structure:
extends CharacterBody3D

# Export variables grouped
@export_group("Movement")
@export var speed := 5.0

# Internal variables
var player: Node3D
var is_active := false

# Signals at top
signal state_changed(new_state: int)

func _ready():
    # Setup and connections

func _physics_process(delta):
    # Main logic

# Public API methods
func get_player_stats() -> Dictionary:
    return {}

# Private helper methods
func _setup_components():
    pass
```

### Naming Conventions
- `snake_case` for variables and functions
- `PascalCase` for classes and resources
- `SCREAMING_SNAKE_CASE` for constants
- Descriptive names: `attack_cooldown_timer` not `timer`

### Error Handling Patterns
```gdscript
# Always check if nodes exist
var player = get_tree().get_first_node_in_group("player")
if not player:
    print("‚ùå Player not found!")
    return

# Use is_instance_valid() for dynamic references
if is_instance_valid(enemy):
    enemy.take_damage(amount)
```

### Debug/Print Style
```gdscript
# Use emojis for easy scanning
print("‚úÖ System initialized successfully")
print("‚ùå Failed to load resource: ", path)
print("üéØ Player attacked enemy for ", damage, " damage")
```

## Current Game Systems

### Combat System
- **Melee**: Instant cone-based damage detection
- **Ranged**: Physics-based arrow projectiles with collision
- **Weapons**: Resource-based with visual switching
- **Damage**: Floating numbers with screen shake

### Movement System
- **Walking**: Realistic foot placement with side-stepping
- **Dashing**: Charge-based with visual effects
- **Knockback**: Physics-based with recovery time
- **Animation**: Hand/foot/body coordination

### Loot System
- **Physics**: Items launch and settle before pickup
- **Variety**: Coins, health potions, XP orbs, weapons
- **Sources**: Enemies, chests, destructible objects
- **Rarity**: Weapon pool system with weighted chances

### World Generation
- **Rooms**: Procedural shapes with protected boundaries
- **Progression**: New rooms unlock after wave completion
- **Decoration**: Treasure chests, destructible objects
- **Boundaries**: Indestructible walls prevent player from breaking the world

## Problem-Solving Approach

### When Suggesting Changes
1. **Identify the specific file and function**
2. **Explain the current issue**
3. **Provide the exact injection point**
4. **Show the code to add/modify**
5. **Explain why this fixes the problem**

### Example Response Format
```
In `dot gds/player.gd`, in the `_physics_process` function, add this after line 150:

```gdscript
# Add this to handle weapon switching
if Input.is_action_just_pressed("switch_weapon"):
    _cycle_weapons()
```

This allows the player to cycle through available weapons using a key press.
```

### Testing Patterns
- Always suggest testing steps after changes
- Include debug prints for verification
- Consider edge cases (null references, invalid states)
- Test with different weapon types, enemy counts, etc.

## Current Challenges & Growth Areas
- **Performance**: Large numbers of enemies and loot items
- **Code Organization**: Growing complexity needs better structure
- **Animation**: Coordinating multiple body parts smoothly
- **UI/UX**: Making systems feel responsive and polished
- **Balancing**: Weapon stats, enemy difficulty, loot rates

## Preferred Learning Topics
- Component architecture patterns
- Performance optimization techniques
- Advanced animation systems
- Procedural generation algorithms
- Game feel and juice techniques