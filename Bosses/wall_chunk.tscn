[gd_scene load_steps=5 format=3 uid="uid://ddhswc7rwsgxl"]

[sub_resource type="GDScript" id="GDScript_qrjbm"]
script/source = "# wall_chunk.gd - Projectile thrown by Demolition King boss
extends RigidBody3D

@export var damage = 10
@export var lifetime = 5.0

func _ready():
	# Enable collision detection
	body_entered.connect(_on_body_entered)
	
	# Auto-cleanup after lifetime expires
	await get_tree().create_timer(lifetime).timeout
	if is_instance_valid(self):
		queue_free()

func throw(force: Vector3):
	\"\"\"Called by boss to launch this chunk\"\"\"
	linear_velocity = force
	angular_velocity = Vector3(randf_range(-5, 5), randf_range(-5, 5), randf_range(-5, 5))

func _on_body_entered(body):  # FIXED: Was *on* instead of _on_
	\"\"\"Handle collision with player or walls\"\"\"
	
	# Hit player - deal damage
	if body.is_in_group(\"player\"):
		print(\"ðŸª¨ Wall chunk hit player!\")
		if body.has_method(\"take_damage\"):
			body.take_damage(damage, self)
		queue_free()
	
	# Hit wall or ground - just bounce naturally
	# RigidBody3D physics will handle this automatically
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_qrjbm"]
albedo_color = Color(0.215902, 0.215902, 0.215902, 1)

[sub_resource type="BoxMesh" id="BoxMesh_m62sn"]
material = SubResource("StandardMaterial3D_qrjbm")
size = Vector3(0.5, 0.5, 0.5)

[sub_resource type="BoxShape3D" id="BoxShape3D_tgpiv"]
size = Vector3(0.5, 0.5, 0.5)

[node name="WallChunk" type="RigidBody3D"]
contact_monitor = true
max_contacts_reported = 10
script = SubResource("GDScript_qrjbm")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
mesh = SubResource("BoxMesh_m62sn")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("BoxShape3D_tgpiv")

[node name="Timer" type="Timer" parent="."]
wait_time = 5.0
one_shot = true
